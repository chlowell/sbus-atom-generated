//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package main

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

type serviceBusManagementClient struct {
	con *connection
}

// ListEntities - Get the details about the entities of the given Service Bus namespace.
// If the operation fails it returns the *ServiceBusManagementError error type.
func (client *serviceBusManagementClient) ListEntities(ctx context.Context, entityType string, options *ServiceBusManagementClientListEntitiesOptions) (ServiceBusManagementClientListEntitiesResponse, error) {
	req, err := client.listEntitiesCreateRequest(ctx, entityType, options)
	if err != nil {
		return ServiceBusManagementClientListEntitiesResponse{}, err
	}
	resp, err := 	client.con.Pipeline().Do(req)
	if err != nil {
		return ServiceBusManagementClientListEntitiesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ServiceBusManagementClientListEntitiesResponse{}, client.listEntitiesHandleError(resp)
	}
	return client.listEntitiesHandleResponse(resp)
}

// listEntitiesCreateRequest creates the ListEntities request.
func (client *serviceBusManagementClient) listEntitiesCreateRequest(ctx context.Context, entityType string, options *ServiceBusManagementClientListEntitiesOptions) (*policy.Request, error) {
	urlPath := "/$Resources/{entityType}"
	if entityType == "" {
		return nil, errors.New("parameter entityType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{entityType}", url.PathEscape(entityType))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Skip != nil {
		reqQP.Set("$skip", strconv.FormatInt(int64(*options.Skip), 10))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	if client.apiVersion != nil {
		reqQP.Set("api-version", "2017_04")
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/xml, application/atom+xml")
	return req, nil
}

// listEntitiesHandleResponse handles the ListEntities response.
func (client *serviceBusManagementClient) listEntitiesHandleResponse(resp *http.Response) (ServiceBusManagementClientListEntitiesResponse, error) {
	result := ServiceBusManagementClientListEntitiesResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.Object); err != nil {
		return ServiceBusManagementClientListEntitiesResponse{}, err
	}
	return result, nil
}

// listEntitiesHandleError handles the ListEntities error response.
func (client *serviceBusManagementClient) listEntitiesHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ServiceBusManagementError{raw: string(body)}
	if err := runtime.UnmarshalAsXML(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListRules - Get the details about the rules of the given topic subscription.
// If the operation fails it returns the *ServiceBusManagementError error type.
func (client *serviceBusManagementClient) ListRules(ctx context.Context, topicName string, subscriptionName string, options *ServiceBusManagementClientListRulesOptions) (ServiceBusManagementClientListRulesResponse, error) {
	req, err := client.listRulesCreateRequest(ctx, topicName, subscriptionName, options)
	if err != nil {
		return ServiceBusManagementClientListRulesResponse{}, err
	}
	resp, err := 	client.con.Pipeline().Do(req)
	if err != nil {
		return ServiceBusManagementClientListRulesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ServiceBusManagementClientListRulesResponse{}, client.listRulesHandleError(resp)
	}
	return client.listRulesHandleResponse(resp)
}

// listRulesCreateRequest creates the ListRules request.
func (client *serviceBusManagementClient) listRulesCreateRequest(ctx context.Context, topicName string, subscriptionName string, options *ServiceBusManagementClientListRulesOptions) (*policy.Request, error) {
	urlPath := "/{topicName}/subscriptions/{subscriptionName}/rules"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if subscriptionName == "" {
		return nil, errors.New("parameter subscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionName}", url.PathEscape(subscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Skip != nil {
		reqQP.Set("$skip", strconv.FormatInt(int64(*options.Skip), 10))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	if client.apiVersion != nil {
		reqQP.Set("api-version", "2017_04")
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/xml, application/atom+xml")
	return req, nil
}

// listRulesHandleResponse handles the ListRules response.
func (client *serviceBusManagementClient) listRulesHandleResponse(resp *http.Response) (ServiceBusManagementClientListRulesResponse, error) {
	result := ServiceBusManagementClientListRulesResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.Object); err != nil {
		return ServiceBusManagementClientListRulesResponse{}, err
	}
	return result, nil
}

// listRulesHandleError handles the ListRules error response.
func (client *serviceBusManagementClient) listRulesHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ServiceBusManagementError{raw: string(body)}
	if err := runtime.UnmarshalAsXML(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListSubscriptions - Get the details about the subscriptions of the given topic.
// If the operation fails it returns the *ServiceBusManagementError error type.
func (client *serviceBusManagementClient) ListSubscriptions(ctx context.Context, topicName string, options *ServiceBusManagementClientListSubscriptionsOptions) (ServiceBusManagementClientListSubscriptionsResponse, error) {
	req, err := client.listSubscriptionsCreateRequest(ctx, topicName, options)
	if err != nil {
		return ServiceBusManagementClientListSubscriptionsResponse{}, err
	}
	resp, err := 	client.con.Pipeline().Do(req)
	if err != nil {
		return ServiceBusManagementClientListSubscriptionsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ServiceBusManagementClientListSubscriptionsResponse{}, client.listSubscriptionsHandleError(resp)
	}
	return client.listSubscriptionsHandleResponse(resp)
}

// listSubscriptionsCreateRequest creates the ListSubscriptions request.
func (client *serviceBusManagementClient) listSubscriptionsCreateRequest(ctx context.Context, topicName string, options *ServiceBusManagementClientListSubscriptionsOptions) (*policy.Request, error) {
	urlPath := "/{topicName}/subscriptions"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Skip != nil {
		reqQP.Set("$skip", strconv.FormatInt(int64(*options.Skip), 10))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	if client.apiVersion != nil {
		reqQP.Set("api-version", "2017_04")
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/xml, application/atom+xml")
	return req, nil
}

// listSubscriptionsHandleResponse handles the ListSubscriptions response.
func (client *serviceBusManagementClient) listSubscriptionsHandleResponse(resp *http.Response) (ServiceBusManagementClientListSubscriptionsResponse, error) {
	result := ServiceBusManagementClientListSubscriptionsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.Object); err != nil {
		return ServiceBusManagementClientListSubscriptionsResponse{}, err
	}
	return result, nil
}

// listSubscriptionsHandleError handles the ListSubscriptions error response.
func (client *serviceBusManagementClient) listSubscriptionsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ServiceBusManagementError{raw: string(body)}
	if err := runtime.UnmarshalAsXML(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

