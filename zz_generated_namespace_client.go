//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package main

import (
	"context"
	"fmt"
	"net/http"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

type namespaceClient struct {
	con *connection
}

// Get - Get the details about the Service Bus namespace.
// If the operation fails it returns the *ServiceBusManagementError error type.
func (client *namespaceClient) Get(ctx context.Context, options *NamespaceGetOptions) (NamespaceGetResponse, error) {
	req, err := client.getCreateRequest(ctx, options)
	if err != nil {
		return NamespaceGetResponse{}, err
	}
	resp, err := 	client.con.Pipeline().Do(req)
	if err != nil {
		return NamespaceGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return NamespaceGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *namespaceClient) getCreateRequest(ctx context.Context, options *NamespaceGetOptions) (*policy.Request, error) {
	urlPath := "/$namespaceinfo"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if client.apiVersion != nil {
		reqQP.Set("api-version", "2017_04")
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/xml, application/atom+xml")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *namespaceClient) getHandleResponse(resp *http.Response) (NamespaceGetResponse, error) {
	result := NamespaceGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.NamespacePropertiesEntry); err != nil {
		return NamespaceGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *namespaceClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ServiceBusManagementError{raw: string(body)}
	if err := runtime.UnmarshalAsXML(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

