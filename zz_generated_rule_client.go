//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package main

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

type ruleClient struct {
	con *connection
}

// Delete - Delete the rule with the given topicName, subscriptionName and ruleName.
// If the operation fails it returns the *ServiceBusManagementError error type.
func (client *ruleClient) Delete(ctx context.Context, topicName string, subscriptionName string, ruleName string, options *RuleDeleteOptions) (RuleDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, topicName, subscriptionName, ruleName, options)
	if err != nil {
		return RuleDeleteResponse{}, err
	}
	resp, err := 	client.con.Pipeline().Do(req)
	if err != nil {
		return RuleDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return RuleDeleteResponse{}, client.deleteHandleError(resp)
	}
	return client.deleteHandleResponse(resp)
}

// deleteCreateRequest creates the Delete request.
func (client *ruleClient) deleteCreateRequest(ctx context.Context, topicName string, subscriptionName string, ruleName string, options *RuleDeleteOptions) (*policy.Request, error) {
	urlPath := "/{topicName}/subscriptions/{subscriptionName}/rules/{ruleName}"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if subscriptionName == "" {
		return nil, errors.New("parameter subscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionName}", url.PathEscape(subscriptionName))
	if ruleName == "" {
		return nil, errors.New("parameter ruleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ruleName}", url.PathEscape(ruleName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if client.apiVersion != nil {
		reqQP.Set("api-version", "2017_04")
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/xml, application/atom+xml")
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *ruleClient) deleteHandleResponse(resp *http.Response) (RuleDeleteResponse, error) {
	result := RuleDeleteResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.Object); err != nil {
		return RuleDeleteResponse{}, err
	}
	return result, nil
}

// deleteHandleError handles the Delete error response.
func (client *ruleClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ServiceBusManagementError{raw: string(body)}
	if err := runtime.UnmarshalAsXML(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Get the details about the rule of a subscription of a topic.
// If the operation fails it returns the *ServiceBusManagementError error type.
func (client *ruleClient) Get(ctx context.Context, topicName string, subscriptionName string, ruleName string, options *RuleGetOptions) (RuleGetResponse, error) {
	req, err := client.getCreateRequest(ctx, topicName, subscriptionName, ruleName, options)
	if err != nil {
		return RuleGetResponse{}, err
	}
	resp, err := 	client.con.Pipeline().Do(req)
	if err != nil {
		return RuleGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return RuleGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ruleClient) getCreateRequest(ctx context.Context, topicName string, subscriptionName string, ruleName string, options *RuleGetOptions) (*policy.Request, error) {
	urlPath := "/{topicName}/subscriptions/{subscriptionName}/rules/{ruleName}"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if subscriptionName == "" {
		return nil, errors.New("parameter subscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionName}", url.PathEscape(subscriptionName))
	if ruleName == "" {
		return nil, errors.New("parameter ruleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ruleName}", url.PathEscape(ruleName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Enrich != nil {
		reqQP.Set("enrich", strconv.FormatBool(*options.Enrich))
	}
	if client.apiVersion != nil {
		reqQP.Set("api-version", "2017_04")
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/xml, application/atom+xml")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ruleClient) getHandleResponse(resp *http.Response) (RuleGetResponse, error) {
	result := RuleGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.Object); err != nil {
		return RuleGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *ruleClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ServiceBusManagementError{raw: string(body)}
	if err := runtime.UnmarshalAsXML(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Put - Create or update a rule
// If the operation fails it returns the *ServiceBusManagementError error type.
func (client *ruleClient) Put(ctx context.Context, topicName string, subscriptionName string, ruleName string, requestBody map[string]interface{}, options *RulePutOptions) (RulePutResponse, error) {
	req, err := client.putCreateRequest(ctx, topicName, subscriptionName, ruleName, requestBody, options)
	if err != nil {
		return RulePutResponse{}, err
	}
	resp, err := 	client.con.Pipeline().Do(req)
	if err != nil {
		return RulePutResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return RulePutResponse{}, client.putHandleError(resp)
	}
	return client.putHandleResponse(resp)
}

// putCreateRequest creates the Put request.
func (client *ruleClient) putCreateRequest(ctx context.Context, topicName string, subscriptionName string, ruleName string, requestBody map[string]interface{}, options *RulePutOptions) (*policy.Request, error) {
	urlPath := "/{topicName}/subscriptions/{subscriptionName}/rules/{ruleName}"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if subscriptionName == "" {
		return nil, errors.New("parameter subscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionName}", url.PathEscape(subscriptionName))
	if ruleName == "" {
		return nil, errors.New("parameter ruleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ruleName}", url.PathEscape(ruleName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if client.apiVersion != nil {
		reqQP.Set("api-version", "2017_04")
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.IfMatch != nil {
		req.Raw().Header.Set("If-Match", *options.IfMatch)
	}
	req.Raw().Header.Set("Accept", "application/xml, application/atom+xml")
	return req, runtime.MarshalAsXML(req, requestBody)
}

// putHandleResponse handles the Put response.
func (client *ruleClient) putHandleResponse(resp *http.Response) (RulePutResponse, error) {
	result := RulePutResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsXML(resp, &result.Object); err != nil {
		return RulePutResponse{}, err
	}
	return result, nil
}

// putHandleError handles the Put error response.
func (client *ruleClient) putHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
		errType := ServiceBusManagementError{raw: string(body)}
	if err := runtime.UnmarshalAsXML(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

