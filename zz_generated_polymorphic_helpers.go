//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package main

import "encoding/json"

func unmarshalRuleActionClassification(rawMsg json.RawMessage) (RuleActionClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b RuleActionClassification
	switch m["type"] {
	case "EmptyRuleAction":
		b = &EmptyRuleAction{}
	case "SqlRuleAction":
		b = &SQLRuleAction{}
	default:
		b = &RuleAction{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalRuleActionClassificationArray(rawMsg json.RawMessage) ([]RuleActionClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]RuleActionClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalRuleActionClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalRuleFilterClassification(rawMsg json.RawMessage) (RuleFilterClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b RuleFilterClassification
	switch m["type"] {
	case "CorrelationFilter":
		b = &CorrelationFilter{}
	case "FalseFilter":
		b = &FalseFilter{}
	case "SqlFilter":
		b = &SQLFilter{}
	case "TrueFilter":
		b = &TrueFilter{}
	default:
		b = &RuleFilter{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalRuleFilterClassificationArray(rawMsg json.RawMessage) ([]RuleFilterClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]RuleFilterClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalRuleFilterClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalSQLFilterClassification(rawMsg json.RawMessage) (SQLFilterClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b SQLFilterClassification
	switch m["type"] {
	case "FalseFilter":
		b = &FalseFilter{}
	case "TrueFilter":
		b = &TrueFilter{}
	default:
		b = &SQLFilter{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalSQLFilterClassificationArray(rawMsg json.RawMessage) ([]SQLFilterClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]SQLFilterClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalSQLFilterClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

